apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
	compileSdkVersion 34
	buildToolsVersion '34.0.0'
	ndkVersion "$ndk_version"
	defaultConfig {
		applicationId 'me.korata.finecraft'
		minSdkVersion 21
		targetSdkVersion 34
		versionName "${versionMajor}.${versionMinor}.${versionPatch}"
		versionCode project.versionCode
	}

	// load properties
	Properties props = new Properties()
	def propfile = file('../local.properties')
	if (propfile.exists())
		props.load(new FileInputStream(propfile))

		signingConfigs {
			release {
            	keyAlias props['keyAlias']
            	keyPassword props['keyPassword']
            	storeFile props['storeFile'] ? file(props['storeFile']) : null
            	storePassword props['storePassword']
			}
		}

		buildTypes {
			release {
				minifyEnabled true
				signingConfig signingConfigs.release
			}
		}

	// for multiple APKs
	splits {
		abi {
			enable true
			reset()
			include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

task prepareAssets() {
	def assetsFolder = "build/assets"
	def projRoot = rootDir.parent
	def gameToCopy = "finecraft"

	// See issue #4638
	def unsupportedLanguages = new File("${projRoot}/src/unsupported_language_list.txt").text.readLines()

	doFirst {
		logger.lifecycle('Preparing assets at {}', assetsFolder)
	}
	doLast {
		copy {
			from "${projRoot}/minetest.conf.example", "${projRoot}/README.md" into assetsFolder
		}
		copy {
			from "${projRoot}/doc/lgpl-2.1.txt" into assetsFolder
		}
		copy {
			from "${projRoot}/builtin" into "${assetsFolder}/builtin"
		}
		copy {
			from "${projRoot}/client/shaders" into "${assetsFolder}/client/shaders"
		}
		copy {
			from "../native/deps/armeabi-v7a/Irrlicht/Shaders" into "${assetsFolder}/client/shaders/Irrlicht"
		}
		copy {
			from "${projRoot}/fonts" include "*.ttf" into "${assetsFolder}/fonts"
		}
		copy {
			from "${projRoot}/games/${gameToCopy}" into "${assetsFolder}/games/${gameToCopy}"
		}
		copy {
			from "${projRoot}/textures" into "${assetsFolder}/textures"
		}

		// compile translations
		fileTree("${projRoot}/po").include("**/*.po").grep {
			it.parentFile.name !in unsupportedLanguages
		}.forEach { poFile ->
			def moPath = "${assetsFolder}/locale/${poFile.parentFile.name}/LC_MESSAGES/"
			file(moPath).mkdirs()
			exec {
				commandLine 'msgfmt', '-o', "${moPath}/minetest.mo", poFile
			}
		}

		file("${assetsFolder}/.nomedia").text = ""
	}

	task zipAssets(dependsOn: prepareAssets, type: Zip) {
		archiveFileName = "Minetest.zip"
		from assetsFolder
		destinationDirectory = file("src/main/assets")
	}
}

preBuild.dependsOn zipAssets
prepareAssets.dependsOn ':native:getDeps'

// Map for the version code that gives each ABI a value.
import com.android.build.OutputFile

def abiCodes = ['armeabi-v7a': 0, 'arm64-v8a': 1]
android.applicationVariants.all { variant ->
	variant.outputs.each {
		output ->
			def abiName = output.getFilter(OutputFile.ABI)
			output.versionCodeOverride = abiCodes.get(abiName, 0) + variant.versionCode
	}
}

dependencies {
	implementation project(':native')
	implementation(platform("com.google.firebase:firebase-bom:32.6.0"))
	implementation("com.google.firebase:firebase-analytics")
	implementation 'androidx.appcompat:appcompat:1.6.1'
	implementation 'com.google.android.gms:play-services-ads:22.5.0'
	implementation 'com.google.firebase:firebase-crashlytics:18.6.0'
}
